name: Python Tests and Deploy

on:
  push:
    branches: [ "master" , "develop"]
  pull_request:
    branches: [ "master" , "develop"]

permissions:
  contents: read

jobs:
    Lint:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Set up Python 3.10
          uses: actions/setup-python@v3
          with:
            python-version: "3.10"
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install flake8 pytest
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        - name: Lint with flake8
          run: |
            # stop the build if there are Python syntax errors or undefined names
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    Test:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-python@v3
          with:
            python-version: "3.10"
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install flake8 pytest
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        - name: Test with pytest
          run: |
            pytest

    Terraform:
      name: 'Terraform'
      runs-on: ubuntu-latest
      environment: production

      defaults:
        run:
          shell: bash

      steps:
        - name: Checkout
          uses: actions/checkout@v3

        # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          working-directory: ./terraform
          run: terraform init

        # Checks that all Terraform configuration files adhere to a canonical format
        - name: Terraform Format
          working-directory: ./terraform
          run: terraform fmt

        # Generates an execution plan for Terraform
        - name: Terraform Plan
          working-directory: ./terraform
          run: terraform plan -input=false

        # Runs Terraform 'apply' in case it's in the 'master'
        - name: Terraform Apply
          if: github.ref == 'refs/heads/master'
          working-directory: ./terraform
          run: terraform apply -auto-approve -input=false
